{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","constants.js","actions.js","api/api.js","containers/App.js","reducers.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","boder","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","Header","nextProps","nextState","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","requestRobots","dispatch","link","fetch","then","response","json","data","payload","catch","App","searchfield","useSelector","searchRobots","searchField","isPending","useDispatch","filteredRobots","filter","robot","toLocaleLowerCase","includes","useEffect","event","text","target","value","initialStateSearch","initialStateRobots","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f9957219.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card  = ({id, name, email}) => {\n    return (\n        <div className=\"bg-light-green dib br3 pd3 ma2 grow bw2 shadow-5 \">\n            <img\n                src={`https://robohash.org/${id}?200x200`} alt=\"robots\"\n            />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({robots}) => {\n    return (\n        <div>\n            {robots.map((user, i) => {\n                return (\n                    <Card\n                        key={i}\n                        name={robots[i].name}\n                        id={robots[i].id}\n                        email={robots[i].email}\n                    />\n                );\n            })}\n        </div>\n    );\n}\n\nexport default CardList","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className=\"pa2 \">\n            <input\n                className=\"pa3 ba b--green bg-lightest-blue\"\n                type=\"search\"\n                placeholder=\"Search Robots\"\n                onChange={searchChange}\n            />\n        </div>\n    );\n};\n\nexport default SearchBox;\n","// import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY:'scroll', boder:'1px solid black', height:'800px'}}>\n            {props.children}\n        </div>\n    )\n}\n\n\nexport default Scroll","import React, {Component} from 'react';\n\n\nclass ErrorBoundry extends Component {\n    constructor(props){\n        super()\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState( {\n            hasError: true\n        })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Ooooops. That is not good</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry","import React, { Component } from \"react\";\n// import CounterButton from \"./CounterButton\";\n\nclass Header extends Component{\n    shouldComponentUpdate(nextProps, nextState){\n        return false\n    }\n    render(){\n        return(\n            <div>\n                <h1 className=\"f1\">ROBOFRIENDS</h1>\n                {/* <CounterButton color={'red'}/> */}\n            </div>\n        )\n    }\n}\n\nexport default Header","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'; \n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {apiCall} from './api/api'\nimport {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n} from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    apiCall('https://jsonplaceholder.typicode.com/users')\n        .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch((error) => dispatch({ type: REQUEST_ROBOTS_FAILED, payload:error}));\n};\n","export const apiCall = (link) =>\n    fetch(link).then((response) => response.json());\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n// ---- Components\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\n// ----\n\n// ---- Styles\nimport './App.css';\n// ----\n\n// ---- Actions\nimport { requestRobots, setSearchField } from '../actions';\n// ----\n\nfunction App() {\n    const searchfield = useSelector((state) => state.searchRobots.searchField);\n    const robots = useSelector((state) => state.requestRobots.robots);\n    const isPending = useSelector((state) => state.requestRobots.isPending);\n    const error = useSelector((state) => state.requestRobots.error);\n\n    const dispatch = useDispatch();\n\n    const onSearchChange = (event) =>\n        dispatch(setSearchField(event.target.value));\n\n    const filteredRobots = robots.filter((robot) => {\n        return robot.name\n            .toLocaleLowerCase()\n            .includes(searchfield.toLocaleLowerCase());\n    });\n\n    useEffect(() => {\n        const onRequestRobots = () => dispatch(requestRobots());\n        onRequestRobots();\n    }, [dispatch]);\n\n    if (!error) {\n        return isPending ? (\n            <h1 className=\"tc\">Loading...</h1>\n        ) : (\n            <div className=\"tc\">\n                <Header />\n                <SearchBox searchChange={onSearchChange} />\n                <Scroll>\n                    <ErrorBoundry>\n                        <CardList robots={filteredRobots} />\n                    </ErrorBoundry>\n                </Scroll>\n            </div>\n        );\n    } else {\n        return <h1 className=\"tc\">Ooops, something went wrong.</h1>;\n    }\n}\n\nexport default App;\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n} from './constants';\n\nconst initialStateSearch = {\n    searchField: '',\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return { ...state, searchField: action.payload };\n        default:\n            return state;\n    }\n};\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: '',\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return { ...state, isPending: true };\n        case REQUEST_ROBOTS_SUCCESS:\n            return { ...state, robots: action.payload, isPending: false };\n        case REQUEST_ROBOTS_FAILED:\n            return { ...state, error: action.payload, isPending: false };\n        default:\n            return state;\n    }\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}